
import { jsPDF } from 'jspdf';
import { AppState, Founder } from '../types';
import 'jspdf-autotable';

// Extend the jsPDF type to correctly include autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
    // Add the previous property to the autoTable namespace
    autoTable: {
      previous: {
        finalY: number;
      };
    };
  }
}

export const generatePDF = (state: AppState): void => {
  const { founders, history, milestones } = state;
  const doc = new jsPDF();
  
  // Title
  doc.setFontSize(20);
  doc.setTextColor(90, 50, 168); // Purple color
  doc.text('Startup Equity Distribution Report', 20, 20);
  
  // Current date
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);

  // Current Equity Distribution
  doc.setFontSize(16);
  doc.setTextColor(0, 0, 0);
  doc.text('Current Equity Distribution', 20, 40);

  // Table for current equity
  const currentEquityData = founders.map(founder => [
    founder.name,
    founder.role,
    `${founder.equityPercentage.toFixed(2)}%`,
  ]);

  doc.autoTable({
    startY: 45,
    head: [['Co-founder', 'Role', 'Equity']],
    body: currentEquityData,
    headStyles: { fillColor: [90, 50, 168] },
  });

  // Scoring details
  doc.setFontSize(16);
  doc.setTextColor(0, 0, 0);
  doc.text('Detailed Scoring', 20, doc.autoTable.previous.finalY + 15);

  for (const founder of founders) {
    doc.setFontSize(12);
    doc.setTextColor(90, 50, 168);
    doc.text(`${founder.name} - ${founder.role}`, 20, doc.autoTable.previous.finalY + 25);
    
    const scoreData = [
      ['Role in Project', founder.scores.role],
      ['Usefulness', founder.scores.usefulness],
      ['Idea Contribution', founder.scores.ideaContribution],
      ['Business Plan', founder.scores.businessPlan],
      ['Domain Expertise', founder.scores.expertise],
      ['Commitment & Risk', founder.scores.commitment],
      ['Operations', founder.scores.operations],
    ];

    doc.autoTable({
      startY: doc.autoTable.previous.finalY + 30,
      head: [['Criterion', 'Score (0-10)']],
      body: scoreData,
      headStyles: { fillColor: [120, 80, 198] },
    });
  }

  // Equity Evolution History
  if (history.length > 0) {
    doc.addPage();
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('Equity Evolution History', 20, 20);

    let yPosition = 30;
    for (const entry of history) {
      doc.setFontSize(12);
      doc.setTextColor(90, 50, 168);
      doc.text(
        `Milestone: ${entry.milestoneName} - ${new Date(entry.date).toLocaleDateString()}`,
        20,
        yPosition
      );

      const historyData = entry.founders.map(founder => [
        founder.name,
        `${founder.equityPercentage.toFixed(2)}%`,
      ]);

      doc.autoTable({
        startY: yPosition + 5,
        head: [['Co-founder', 'Equity %']],
        body: historyData,
        headStyles: { fillColor: [120, 80, 198] },
      });

      yPosition = doc.autoTable.previous.finalY + 15;
      
      // Add new page if needed
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 20;
      }
    }
  }

  // Progress Overview
  const completedMilestones = milestones.filter(m => m.completed);
  if (completedMilestones.length > 0) {
    if (doc.autoTable.previous.finalY > 220) {
      doc.addPage();
    }
    
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('Startup Progress', 20, doc.autoTable.previous.finalY + 15);

    const milestoneData = milestones.map(milestone => [
      milestone.name,
      milestone.completed ? 'Completed' : milestone.current ? 'In Progress' : 'Pending',
    ]);

    doc.autoTable({
      startY: doc.autoTable.previous.finalY + 20,
      head: [['Milestone', 'Status']],
      body: milestoneData,
      headStyles: { fillColor: [90, 50, 168] },
      bodyStyles: {
        textColor: (data) => {
          const status = data.cell.raw;
          if (status === 'Completed') return [0, 128, 0]; // green for completed
          if (status === 'In Progress') return [0, 0, 255]; // blue for in progress
          return [100, 100, 100]; // grey for pending
        },
      },
    });
  }

  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text(
      'Generated by Equity Growth Compass | This document is for informational purposes only.',
      20,
      285
    );
    doc.text(`Page ${i} of ${pageCount}`, 190, 285);
  }

  // Save the PDF
  doc.save('equity-growth-compass-report.pdf');
};
